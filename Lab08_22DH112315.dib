#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

Tạo lớp Graph

#!csharp

public class Graph
 {
     public int N { get; set; }
     public int numEdges;
     protected const int INF = 1000;
     protected int maxWeight = 0;
     protected List<Tuple<int, int, int>> listCircle;
     protected List<List<Tuple<int, int>>> AdjWeghList;
     protected List<List<Tuple<int, int, int>>> AdjWeghListG2S;
     protected LinkedList<Tuple<int, int>> EdgeList;
     protected List<List<Tuple<int, int>>> AdjList;
     public int[,] AdjacencyMatrix;
     public int[,] floydMatrix;
     public int nRow;
     public int nCol;
     public int sVertex;
     public int eVertex;
     public int iVertex;
     protected Tuple<int, int> sNode;
     public bool[] color;
     public int[] back;
     public double[] distance;
 }

#!markdown

Interface Bài 1

#!csharp

internal interface GoMargin
{
    void GoMargin(string fname);
}

#!markdown

Bài 1

#!csharp

using System;
using System.IO;

internal class Bai01 : Graph, GoMargin
{
    public void GoMargin(string fname)
    {
        ReadGoMargin(fname);
        GoMargin();
        WriteGoMargin(fname.Substring(0, fname.Length - 3) + "OUT", distance[eVertex]);
    }

    public void WriteGoMargin(string fname, double value, bool isInt = true)
    {
        using (StreamWriter file = new StreamWriter(fname))
        {
            if (isInt)
                file.Write(String.Format("{0:F0}", value));
            else
                file.Write(String.Format("{0:F2}", value));
        }
    }

    public void GoMargin()
    {
        InitBoolArray(false);
        InitIntArray(-1, 1);
        InitIntArray(INF, 2);
        int[] dx = { -1, 0, 0, 1 };
        int[] dy = { 0, -1, 1, 0 };
        int g = Point2Num(sNode.Item1, sNode.Item2);

        distance[g] = 0;
        do
        {
            g = eVertex;
            for (int i = 0; i < N; i++)
            {
                if (!color[i] && distance[g] > distance[i])
                {
                    g = i;
                }
            }
            if ((distance[g] == INF) || g == eVertex)
                break;
            if (ISMargin(g))
            {
                eVertex = g;
                break;
            }

            color[g] = true;

            int xcur = 0;
            int ycur = 0;
            Num2Point(g, ref xcur, ref ycur);

            for (int i = 0; i < 4; i++)
            {
                int x = xcur + dx[i];
                int y = ycur + dy[i];
                if (!InBoard(x, y))
                    continue;

                int v = Point2Num(x, y);
                if (!color[v])
                {
                    double d = distance[g] + AdjacencyMatrix[x, y];
                    if (distance[v] > d)
                    {
                        distance[v] = d;
                        back[v] = g;
                    }
                }
            }

        } while (true);
    }

    public bool ISMargin(int g)
    {
        int i = 0;
        int j = 0;
        Num2Point(g, ref i, ref j);

        return (i == 0) || (i == (nRow - 1)) || (j == 0) || (j == nCol - 1);
    }

    private void InitIntArray(int value, int type = 1)
    {
        if (type == 1)
        {
            back = new int[N];
            for (int i = 0; i < back.Length; i++)
                back[i] = value;
            return;
        }
        if (type == 2)
        {
            distance = new double[N + 1];
            for (int i = 0; i < distance.Length; i++)
                distance[i] = value;
            distance[N]++;
            return;
        }
    }

    public void InitBoolArray(bool value = false)
    {
        color = new bool[N];
        for (int i = 0; i < color.Length; i++)
            color[i] = value;
    }

    public void ReadGoMargin(string fname)
    {
        string[] lines = File.ReadAllLines(fname);
        string[] line = lines[0].Split(' ');
        nRow = int.Parse(line[0].Trim());
        nCol = int.Parse(line[1].Trim());

        N = nRow * nCol;
        sNode = new Tuple<int, int>(Int32.Parse(line[2].Trim()) - 1, Int32.Parse(line[3].Trim()) - 1);
        sVertex = Point2Num(sNode.Item1, sNode.Item2);

        AdjacencyMatrix = new int[nRow, nCol];
        eVertex = nRow * nCol;

        for (int i = 1; i < lines.Length; i++)
        {
            line = lines[i].Split(' ');
            for (int j = 0; j < line.Length; j++)
            {
                SetNode(i - 1, j, Int32.Parse(line[j].Trim()));
            }
        }
    }

    public void SetNode(int i, int j, int value)
    {
        if (i < 0 || i >= nRow || j < 0 || j >= nCol)
        {
            Console.WriteLine(String.Format("Ngoài phạm vi ({0}, {1})", i, j));
            return;
        }
        AdjacencyMatrix[i, j] = value;
    }

    public int GetNode(int i, int j)
    {
        if (i < 0 || i >= nRow || j < 0 || j >= nCol)
        {
            Console.WriteLine(String.Format("Ngoài phạm vi ({0}, {1})", i, j));
            return Int32.MinValue;
        }
        return (int)AdjacencyMatrix[i, j];
    }

    public int Point2Num(int i, int j)
    {
        return i * nCol + j;
    }

    public void Num2Point(int num, ref int i, ref int j)
    {
        i = num / nCol;
        j = num % nCol;
    }

    public bool InBoard(int x, int y)
    {
        return (x >= 0) && (x < nRow) && (y >= 0) && (y < nCol);
    }

    public void PrintArray(int type = 1)
    {
        if (type == 1)
        {
            foreach (double d in distance)
                Console.Write(String.Format("{0,-5}", d));
            Console.WriteLine();
            return;
        }
        if (type == 2)
        {
            foreach (int d in back)
                Console.Write(String.Format("{0,-5}", d));
            Console.WriteLine();
            return;
        }
    }
}

#!markdown

Chạy bài 1

#!csharp

Bai01 graph = new Bai01();
graph.GoMargin("RaBien.INP");

#!markdown

Interface Bài 2

#!csharp

internal interface ChooseCity
{
    void ChooseCity(string fname);
}

#!markdown

Bài 2

#!csharp

using System;
using System.IO;

internal class Bai02 : Graph, ChooseCity
{
     public void ChooseCity(string fname)
 {
     ReadMatrix2AdjList(fname); 
     eVertex = N;
     Tuple<int, double> city = ChooseCity(); 
     WriteCity(fname.Substring(0, fname.Length - 3) + "OUT", city);
 }

 public void ReadMatrix2AdjList(string fname)
{
    string[] lines = System.IO.File.ReadAllLines(fname);
    N = Int32.Parse(lines[0].Trim());
    Console.WriteLine("Number of vertices: " + N);
    AdjWeghList = new List<List<Tuple<int, int>>>(); 
    for (int i = 0; i < N; i++)
        AdjWeghList.Add(new List<Tuple<int, int>>());
    for (int i = 0; i < N; i++)
    {
        string[] line = lines[i + 1].Trim().Split(' ');
        for (int j = 0; j < line.Length; j++)
        {
            int w = Int32.Parse(line[j].Trim()); 
            if (w == 0)
                continue;
            AdjWeghList[i].Add(new Tuple<int, int>(j, w)); 
        }
    }
}
public Tuple<int, double> ChooseCity()
{
    Tuple<int, double> res = new Tuple<int, double>(-1, INF);
    for (int v = 0; v < N; v++)
    {
        AdjMatrixShortestPath(v); 
        double dist = distance[Max()]; 
        if (res.Item2 > dist)
            res = new Tuple<int, double>(v, dist);
    }
    return res;
}

public void AdjMatrixShortestPath(int g)
{
    InitIntArray(-1);   
    InitIntArray(INF, 2);
    InitBoolArray(false);
    distance[g] = 0;
    do
    {
        g = eVertex;
        for (int i = 0; i < N; i++)
        {
            if (!color[i] && distance[g] > distance[i])
            {
                g = i;
            }
        }
        if ((distance[g] == INF) || g == eVertex)
            break;

        color[g] = true;

        foreach (Tuple<int, int> city in AdjWeghList[g])
        {
            int v = city.Item1;
            int w = city.Item2;
            if (!color[v])
            {
                double d = distance[g] + w;
                if (distance[v] > d)
                {
                    distance[v] = d;
                    back[v] = g;
                }
            }
        }
    }
    while (true);
}
public int Max()
{
    int pos = 0;

    for (int i = 1; i < N; i++)
        if (distance[pos] < distance[i])
        {
            pos = i;

        }
    return pos;
}

private void InitIntArray(int value, int type = 1)
    {
        if (type == 1)
        {
            back = new int[N];
            for (int i = 0; i < back.Length; i++)
                back[i] = value;
            return;
        }
        if (type == 2)
        {
            distance = new double[N + 1];
            for (int i = 0; i < distance.Length; i++)
                distance[i] = value;
            distance[N]++;
            return;
        }
    }

    public void InitBoolArray(bool value = false)
    {
        color = new bool[N];
        for (int i = 0; i < color.Length; i++)
            color[i] = value;
    }

public void WriteCity(string fname, Tuple<int, double> city)
{
    using (StreamWriter file = new StreamWriter(fname))
    {
        file.WriteLine(city.Item1 + 1);
        file.WriteLine(String.Format("{0:F0}", city.Item2));

        Console.WriteLine("Kết quả: ");
        Console.WriteLine("City: " + (city.Item1 + 1));
        Console.WriteLine("Distance: " + String.Format("{0:F0}", city.Item2));
    }
}
}

#!markdown

Chạy bài 2

#!csharp

Bai02 graph = new Bai02();
graph.ChooseCity("ChonThanhPho.INP");   

#!markdown

Interface Bài 3

#!csharp

internal interface MoveCircle
{
    void MoveCircle(string fname);
}

#!markdown

Bài 3

#!csharp

using System;
using System.Collections.Generic;
using System.IO;

internal class Bai03 : Graph, MoveCircle
{
    public void MoveCircle(string fname)
    {
        ReadMoveCircle(fname);
        GenerateAdjMatrix();
        DijkstraShortestPath(sVertex);
        WriteGoMargin(fname.Substring(0, fname.Length - 3) + "OUT", distance[eVertex]);
    }

    public void ReadMoveCircle(string fname)
    {
        string[] lines = File.ReadAllLines(fname);
        string[] line = lines[0].Split(' ');

        N = int.Parse(line[0].Trim());
        sVertex = int.Parse(line[1].Trim()) - 1;
        eVertex = int.Parse(line[2].Trim()) - 1;

        Console.WriteLine("Number of vertices: " + N);
        listCircle = new List<Tuple<int, int, int>>();

        for (int i = 0; i < N; i++)
        {
            line = lines[i + 1].Split(' ');
            int x = int.Parse(line[0].Trim());
            int y = int.Parse(line[1].Trim());
            int r = int.Parse(line[2].Trim());
            listCircle.Add(new Tuple<int, int, int>(x, y, r));
        }
    }

    public void WriteGoMargin(string fname, double value, bool isInt = true)
    {
        using (StreamWriter file = new StreamWriter(fname))
        {
            if (isInt)
                file.Write($"{value:F0}");
            else
                file.Write($"{value:F2}");
        }
    }

    public void GenerateAdjMatrix()
    {
        AdjacencyMatrix = new int[N, N];
        int sz = N - 1;
        for (int i = 0; i < sz; i++)
        {
            AdjacencyMatrix[i, i] = 0;
            for (int j = i + 1; j < N; j++)
            {
                double dis = Math.Max(0, Math.Sqrt(Math.Pow(listCircle[i].Item1 - listCircle[j].Item1, 2) + Math.Pow(listCircle[i].Item2 - listCircle[j].Item2, 2)) - listCircle[i].Item3 - listCircle[j].Item3);
                AdjacencyMatrix[i, j] = (int)dis;
                AdjacencyMatrix[j, i] = (int)dis;
            }
        }
    }

    public void DijkstraShortestPath(int start)
    {
        InitIntArray(-1);
        InitIntArray(INF, 2);
        InitBoolArray(false);

        distance[start] = 0;

        for (int count = 0; count < N - 1; count++)
        {
            int u = MinDistance(distance, color);
            color[u] = true;

            for (int v = 0; v < N; v++)
            {
                if (!color[v] && AdjacencyMatrix[u, v] != INF && distance[u] != INF && distance[u] + AdjacencyMatrix[u, v] < distance[v])
                {
                    distance[v] = distance[u] + AdjacencyMatrix[u, v];
                }
            }
        }
    }

    private int MinDistance(double[] dist, bool[] visited)
    {
        double min = double.PositiveInfinity;
        int minIndex = -1;

        for (int v = 0; v < N; v++)
        {
            if (!visited[v] && dist[v] <= min)
            {
                min = dist[v];
                minIndex = v;
            }
        }

        return minIndex;
    }
public void InitIntArray(int value, int type = 1)
    {
        if (type == 1)
        {
            back = new int[N];
            for (int i = 0; i < back.Length; i++)
                back[i] = value;
            return;
        }
        if (type == 2)
        {
            distance = new double[N + 1];
            for (int i = 0; i < distance.Length; i++)
                distance[i] = value;
            distance[N]++;
            return;
        }
    }

    public void InitBoolArray(bool value = false)
    {
        color = new bool[N];
        for (int i = 0; i < color.Length; i++)
            color[i] = value;
    }
}

#!markdown

Chạy bài 3

#!csharp

Bai03 graph = new Bai03();
graph.MoveCircle("DuongTron.INP");

#!markdown

Interface Bài 4

#!csharp

internal interface Go2School
{
    void Go2School(string fname);
}

#!markdown

Bài 4

#!csharp

using System;
using System.IO;

internal class Bai04 : Graph, Go2School
{
    public void Go2School(string fname)
    {
        ReadGo2School(fname);
        int value = Go2School();
        WriteGoMargin(fname.Substring(0, fname.Length - 3) + "OUT", value);
    }

    public void WriteGoMargin(string fname, int value)
    {
        using (StreamWriter file = new StreamWriter(fname))
        {
            file.Write(value);
        }
    }

    public int Go2School()
    {
        int temp = eVertex;
        eVertex = iVertex; 

        InitIntArray(-1);
        InitIntArray(INF, 2); 
        InitBoolArray(false); 

        distance[sVertex] = 0; 
        SubSPG2S(sVertex); 

        List<int> phase1 = TracePath(); 
        eVertex = temp; 

        for (int i = 0; i < N; i++)
        {
            if (!phase1.Contains(i + 1))
            {
                color[i] = false;
                back[i] = -1;
            }
        }

        SubSPG2S(iVertex);
        return (int)Math.Round(distance[eVertex]); 
    }

    public void InitIntArray(int value, int type = 1)
    {
        if (type == 1)
        {
            back = new int[N];
            for (int i = 0; i < back.Length; i++)
                back[i] = value;
            return;
        }
        if (type == 2)
        {
            distance = new double[N + 1];
            for (int i = 0; i < distance.Length; i++)
                distance[i] = value;
            distance[N]++;
            return;
        }
    }

    public void InitBoolArray(bool value = false)
    {
        color = new bool[N];
        for (int i = 0; i < color.Length; i++)
            color[i] = value;
    }

    public void ReadGo2School(string fname)
    {
        string[] lines = File.ReadAllLines(fname);
        string[] firstLine = lines[0].Split(' ');
        N = int.Parse(firstLine[0].Trim());
        numEdges = int.Parse(firstLine[1].Trim());
        eVertex = int.Parse(firstLine[2].Trim()) - 1;

        AdjWeghListG2S = new List<List<Tuple<int, int, int>>>();
        for (int i = 0; i < N; i++)
        {
            AdjWeghListG2S.Add(new List<Tuple<int, int, int>>());
        }

        for (int i = 0; i < numEdges; i++)
        {
            string[] line = lines[i + 1].Split(' ');
            int v1 = int.Parse(line[0].Trim()) - 1;
            int v2 = int.Parse(line[1].Trim()) - 1;
            int w = int.Parse(line[2].Trim());
            int w2 = int.Parse(line[3].Trim());
            AdjWeghListG2S[v1].Add(new Tuple<int, int, int>(v2, w, w2));
        }
    }

    public void SubSPG2S(int g)
    {
        while (true)
        {
            double minDistance = INF;
            int minIndex = -1;

            for (int i = 0; i < N; i++)
            {
                if (!color[i] && distance[i] < minDistance)
                {
                    minDistance = distance[i];
                    minIndex = i;
                }
            }

            if ((minDistance == INF) || minIndex == eVertex)
                break;

            g = minIndex; 
            color[g] = true;

            foreach (Tuple<int, int, int> v in AdjWeghListG2S[g])
            {
                if (!color[v.Item1])
                {
                    int w = Math.Min(v.Item2, v.Item3); 
                    double d = distance[g] + w;
                    if (distance[v.Item1] > d)
                    {
                        distance[v.Item1] = d;
                        back[v.Item1] = g;
                    }
                }
            }
        }
    }

    public List<int> TracePath()
    {
        int y = eVertex;
        int x = sVertex;

        List<int> res = new List<int>();
        res.Add(y);

        int v = back[y];
        while (v != -1 && v != x)
        {
            res.Insert(0, v);
            v = back[v];
        }

        if (v == x)
            res.Insert(0, v);

        return res;
    }
}

#!markdown

Chạy bài 4

#!csharp

Bai04 graph = new Bai04();
graph.Go2School("SCHOOL.INP");
